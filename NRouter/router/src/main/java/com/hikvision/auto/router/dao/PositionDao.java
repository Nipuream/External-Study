package com.hikvision.auto.router.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.hikvision.auto.router.info.Position;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "position".
*/
public class PositionDao extends AbstractDao<Position, Long> {

    public static final String TABLENAME = "position";

    /**
     * Properties of entity Position.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Accuracy = new Property(1, float.class, "accuracy", false, "ACCURACY");
        public final static Property Longitude = new Property(2, double.class, "longitude", false, "LONGITUDE");
        public final static Property Latitude = new Property(3, double.class, "latitude", false, "LATITUDE");
        public final static Property Time = new Property(4, long.class, "time", false, "TIME");
        public final static Property Altitude = new Property(5, double.class, "altitude", false, "ALTITUDE");
        public final static Property Speed = new Property(6, float.class, "speed", false, "SPEED");
        public final static Property Bearing = new Property(7, float.class, "bearing", false, "BEARING");
        public final static Property Satellites = new Property(8, int.class, "satellites", false, "SATELLITES");
    };


    public PositionDao(DaoConfig config) {
        super(config);
    }
    
    public PositionDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"position\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"ACCURACY\" REAL NOT NULL ," + // 1: accuracy
                "\"LONGITUDE\" REAL NOT NULL ," + // 2: longitude
                "\"LATITUDE\" REAL NOT NULL ," + // 3: latitude
                "\"TIME\" INTEGER NOT NULL ," + // 4: time
                "\"ALTITUDE\" REAL NOT NULL ," + // 5: altitude
                "\"SPEED\" REAL NOT NULL ," + // 6: speed
                "\"BEARING\" REAL NOT NULL ," + // 7: bearing
                "\"SATELLITES\" INTEGER NOT NULL );"); // 8: satellites
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"position\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Position entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindDouble(2, entity.getAccuracy());
        stmt.bindDouble(3, entity.getLongitude());
        stmt.bindDouble(4, entity.getLatitude());
        stmt.bindLong(5, entity.getTime());
        stmt.bindDouble(6, entity.getAltitude());
        stmt.bindDouble(7, entity.getSpeed());
        stmt.bindDouble(8, entity.getBearing());
        stmt.bindLong(9, entity.getSatellites());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Position entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindDouble(2, entity.getAccuracy());
        stmt.bindDouble(3, entity.getLongitude());
        stmt.bindDouble(4, entity.getLatitude());
        stmt.bindLong(5, entity.getTime());
        stmt.bindDouble(6, entity.getAltitude());
        stmt.bindDouble(7, entity.getSpeed());
        stmt.bindDouble(8, entity.getBearing());
        stmt.bindLong(9, entity.getSatellites());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Position readEntity(Cursor cursor, int offset) {
        Position entity = new Position( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getFloat(offset + 1), // accuracy
            cursor.getDouble(offset + 2), // longitude
            cursor.getDouble(offset + 3), // latitude
            cursor.getLong(offset + 4), // time
            cursor.getDouble(offset + 5), // altitude
            cursor.getFloat(offset + 6), // speed
            cursor.getFloat(offset + 7), // bearing
            cursor.getInt(offset + 8) // satellites
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Position entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setAccuracy(cursor.getFloat(offset + 1));
        entity.setLongitude(cursor.getDouble(offset + 2));
        entity.setLatitude(cursor.getDouble(offset + 3));
        entity.setTime(cursor.getLong(offset + 4));
        entity.setAltitude(cursor.getDouble(offset + 5));
        entity.setSpeed(cursor.getFloat(offset + 6));
        entity.setBearing(cursor.getFloat(offset + 7));
        entity.setSatellites(cursor.getInt(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Position entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Position entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
