package com.hikvision.auto.router.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.hikvision.auto.router.info.Contract;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "contract".
*/
public class ContractDao extends AbstractDao<Contract, String> {

    public static final String TABLENAME = "contract";

    /**
     * Properties of entity Contract.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Flag = new Property(0, int.class, "flag", false, "FLAG");
        public final static Property PhoneNumber = new Property(1, String.class, "phoneNumber", true, "PHONE_NUMBER");
        public final static Property Contract = new Property(2, String.class, "contract", false, "CONTRACT");
    };


    public ContractDao(DaoConfig config) {
        super(config);
    }
    
    public ContractDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"contract\" (" + //
                "\"FLAG\" INTEGER NOT NULL ," + // 0: flag
                "\"PHONE_NUMBER\" TEXT PRIMARY KEY NOT NULL ," + // 1: phoneNumber
                "\"CONTRACT\" TEXT);"); // 2: contract
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"contract\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Contract entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getFlag());
 
        String phoneNumber = entity.getPhoneNumber();
        if (phoneNumber != null) {
            stmt.bindString(2, phoneNumber);
        }
 
        String contract = entity.getContract();
        if (contract != null) {
            stmt.bindString(3, contract);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Contract entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getFlag());
 
        String phoneNumber = entity.getPhoneNumber();
        if (phoneNumber != null) {
            stmt.bindString(2, phoneNumber);
        }
 
        String contract = entity.getContract();
        if (contract != null) {
            stmt.bindString(3, contract);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1);
    }    

    @Override
    public Contract readEntity(Cursor cursor, int offset) {
        Contract entity = new Contract( //
            cursor.getInt(offset + 0), // flag
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // phoneNumber
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2) // contract
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Contract entity, int offset) {
        entity.setFlag(cursor.getInt(offset + 0));
        entity.setPhoneNumber(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setContract(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
     }
    
    @Override
    protected final String updateKeyAfterInsert(Contract entity, long rowId) {
        return entity.getPhoneNumber();
    }
    
    @Override
    public String getKey(Contract entity) {
        if(entity != null) {
            return entity.getPhoneNumber();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
