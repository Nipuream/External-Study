package com.hikvision.auto.router.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.hikvision.auto.router.info.DriverInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "driverInfo".
*/
public class DriverInfoDao extends AbstractDao<DriverInfo, Long> {

    public static final String TABLENAME = "driverInfo";

    /**
     * Properties of entity DriverInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property DriverIndexCode = new Property(1, String.class, "driverIndexCode", false, "DRIVER_INDEX_CODE");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property Sex = new Property(3, int.class, "sex", false, "SEX");
        public final static Property CardType = new Property(4, int.class, "cardType", false, "CARD_TYPE");
        public final static Property CardID = new Property(5, String.class, "cardID", false, "CARD_ID");
        public final static Property PhotoUrl = new Property(6, String.class, "photoUrl", false, "PHOTO_URL");
        public final static Property LastTime = new Property(7, String.class, "lastTime", false, "LAST_TIME");
        public final static Property DriverVersion = new Property(8, int.class, "driverVersion", false, "DRIVER_VERSION");
        public final static Property NetUrl = new Property(9, String.class, "netUrl", false, "NET_URL");
    };


    public DriverInfoDao(DaoConfig config) {
        super(config);
    }
    
    public DriverInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"driverInfo\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"DRIVER_INDEX_CODE\" TEXT UNIQUE ," + // 1: driverIndexCode
                "\"NAME\" TEXT," + // 2: name
                "\"SEX\" INTEGER NOT NULL ," + // 3: sex
                "\"CARD_TYPE\" INTEGER NOT NULL ," + // 4: cardType
                "\"CARD_ID\" TEXT," + // 5: cardID
                "\"PHOTO_URL\" TEXT," + // 6: photoUrl
                "\"LAST_TIME\" TEXT," + // 7: lastTime
                "\"DRIVER_VERSION\" INTEGER NOT NULL ," + // 8: driverVersion
                "\"NET_URL\" TEXT);"); // 9: netUrl
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"driverInfo\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DriverInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String driverIndexCode = entity.getDriverIndexCode();
        if (driverIndexCode != null) {
            stmt.bindString(2, driverIndexCode);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
        stmt.bindLong(4, entity.getSex());
        stmt.bindLong(5, entity.getCardType());
 
        String cardID = entity.getCardID();
        if (cardID != null) {
            stmt.bindString(6, cardID);
        }
 
        String photoUrl = entity.getPhotoUrl();
        if (photoUrl != null) {
            stmt.bindString(7, photoUrl);
        }
 
        String lastTime = entity.getLastTime();
        if (lastTime != null) {
            stmt.bindString(8, lastTime);
        }
        stmt.bindLong(9, entity.getDriverVersion());
 
        String netUrl = entity.getNetUrl();
        if (netUrl != null) {
            stmt.bindString(10, netUrl);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DriverInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String driverIndexCode = entity.getDriverIndexCode();
        if (driverIndexCode != null) {
            stmt.bindString(2, driverIndexCode);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
        stmt.bindLong(4, entity.getSex());
        stmt.bindLong(5, entity.getCardType());
 
        String cardID = entity.getCardID();
        if (cardID != null) {
            stmt.bindString(6, cardID);
        }
 
        String photoUrl = entity.getPhotoUrl();
        if (photoUrl != null) {
            stmt.bindString(7, photoUrl);
        }
 
        String lastTime = entity.getLastTime();
        if (lastTime != null) {
            stmt.bindString(8, lastTime);
        }
        stmt.bindLong(9, entity.getDriverVersion());
 
        String netUrl = entity.getNetUrl();
        if (netUrl != null) {
            stmt.bindString(10, netUrl);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DriverInfo readEntity(Cursor cursor, int offset) {
        DriverInfo entity = new DriverInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // driverIndexCode
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.getInt(offset + 3), // sex
            cursor.getInt(offset + 4), // cardType
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // cardID
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // photoUrl
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // lastTime
            cursor.getInt(offset + 8), // driverVersion
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // netUrl
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DriverInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDriverIndexCode(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSex(cursor.getInt(offset + 3));
        entity.setCardType(cursor.getInt(offset + 4));
        entity.setCardID(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setPhotoUrl(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setLastTime(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setDriverVersion(cursor.getInt(offset + 8));
        entity.setNetUrl(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DriverInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DriverInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
